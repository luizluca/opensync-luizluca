/*
 * libopensync - A synchronization framework
 * Copyright (C) 2004-2005  Armin Bauer <armin.bauer@opensync.org>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 *
 */

#ifndef OPENSYNC_ANCHOR_H_
#define OPENSYNC_ANCHOR_H_

/**
 * @defgroup OSyncHelper OpenSync Helper Module
 * @ingroup OSyncPublic
 * @defgroup OSyncAnchorAPI OpenSync Anchor
 * @ingroup OSyncHelper
 * @brief Functions to deal with anchors
 *
 * The Anchor module stores some kind of data (called an "anchor") from the
 * Member in a persistent database. This "anchor" gets updated once on each
 * sync. If the "anchor" doesn't match on the next sync a slow-sync is
 * triggered.
 *
 * Example:
 * A random string gets generated by the member on each sync, eg. XYZ, and is
 * stored as the "anchor". If the member didn't get reset or synced somewhere
 * else in the meantime, on the beginning of the next sync the anchor and the
 * string are compared and match: XYZ == XYZ. Regular sync and new random
 * string: ABC, but this time the member got synced with another system and
 * generated a new random string: DEF. On the next local sync the anchor is
 * compared with the member stored string: ABC != DEF - the "anchor" doesn't
 * match with the member string. To avoid any data loss and to get the changed
 * entries of the previous sync with the other system, a slow-sync is
 * required.
 *
 * Example implementation in plugins: syncml, palm-sync, irmc-sync, ...
 *
 */
/*@{*/

/** @brief Compares the value of an anchor with the supplied value
 *
 * @param anchordb the full path to the anchor database file
 * @param key the key of the anchor to look up
 * @param new_anchor the value to compare with the stored value
 * @returns TRUE if the anchor matches, FALSE otherwise
 *
 */
OSYNC_EXPORT osync_bool osync_anchor_compare(const char *anchordb, const char *key, const char *new_anchor);

/** @brief Updates the value of an anchor
 *
 * @param anchordb the full path to the anchor database file
 * @param key the key of the anchor to look up
 * @param new_anchor the new value to set
 *
 */
OSYNC_EXPORT void osync_anchor_update(const char *anchordb, const char *key, const char *new_anchor);

/** @brief Retrieves the value of an anchor
 *
 * @param anchordb the full path to the anchor database file
 * @param key the key of the anchor to look up
 * @returns the value of the anchor if it was found, otherwise NULL
 *
 */
OSYNC_EXPORT char *osync_anchor_retrieve(const char *anchordb, const char *key);

/*@}*/

#endif /* OPENSYNC_ANCHOR_H_ */
